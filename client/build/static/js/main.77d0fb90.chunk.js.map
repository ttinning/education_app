{"version":3,"sources":["components/Navbar.js","components/LandingPage.js","services/AccountsService.js","components/parent/Word.js","components/parent/Topic.js","components/parent/TopicList.js","services/TopicService.js","services/WordService.js","services/auth.js","components/parent/TopicForm.js","containers/parent/ParentDashboard.js","components/student/Topic.js","components/student/TopicList.js","containers/student/StudentDashboard.js","components/student/QuizPage.js","images/trophy.png","components/student/CompletionPage.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","id","to","LandingPage","baseURL","AccountsService","getAccounts","fetch","then","res","json","updateAccounts","payload","console","log","method","body","JSON","stringify","headers","Word","word","accounts","Topic","topic","words","word_list","map","completedTopics","student","completed_topics","completedTopicStatus","completedTopic","title","calculateCompletedTopicStatus","TopicList","topics","listItems","_id","length","className","TopicService","getTopics","postTopic","getHeaders","token","WordService","getWordInfo","TopicForm","addNewTopic","useState","formData","setFormData","onChange","evt","target","value","onSubmit","preventDefault","Object","values","splice","formattedData","data","document","querySelector","reset","htmlFor","type","required","ParentDashboard","setTopics","setAccounts","useEffect","result","parent","name","email","age","newTopic","temp","push","pathname","state","toUpperCase","StudentDashboard","QuizPage","useLocation","questionNumber","setQuestionNumber","answer","setAnswer","wordInfo","setWordInfo","showHint","setShowHint","showAnswer","setShowAnswer","answerCorrect","setAnswerCorrect","randomWord","setRandomWord","answerIncorrect","setAnswerIncorrect","counter","setCounter","quizWord","getElementById","letterRandomise","shuffleWord","split","Math","random","keys","src","definitions","image_url","alt","onClick","letter","index","maxLength","onKeyUp","e","event","concat","toLowerCase","focus","handleKeyUp","definition","AccountService","CompletionPage","isExploding","setIsExploding","useParams","trophy","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.77d0fb90.chunk.js","sourcesContent":["import {Link} from 'react-router-dom';\n\nconst Navbar = () => {\n    return (\n        <nav>\n            <h1>Education Station</h1>\n            <ul id=\"navbar\">\n                <Link to=\"/\">Home </Link>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navbar","import {Link} from 'react-router-dom';\n\nconst LandingPage = () => {\n    return (\n        <section id=\"landing-page\">\n            <Link to=\"/parent\"><button>Parent</button> </Link>\n            <Link to=\"/student\"><button>Student</button> </Link>\n        </section>\n    )\n}\n\nexport default LandingPage;","const baseURL = 'http://localhost:5000/api/accounts/';\n\nconst AccountsService = {\n    getAccounts() {\n        return fetch(baseURL)\n        .then(res => res.json())\n    },\n\n\n    updateAccounts(id, payload) {\n        console.log(id, payload)\n        return fetch(baseURL + id, {\n            method: 'PUT',\n            body: JSON.stringify(payload),\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then(res => res.json());\n    }\n      \n}\n\nexport default AccountsService;","\n\nconst Word = ({word, accounts}) => {\n\n    \n\n\n    return (\n        <li>{word}</li>\n    )\n};\n\nexport default Word;","import AccountsService from \"../../services/AccountsService\";\nimport Word from \"./Word\";\n\nconst Topic = ({topic, accounts}) => {    \n    const words = topic.word_list.map((word) => {\n        return <Word word={word} accounts={accounts}></Word>\n    });\n\n    const completedTopics = accounts[0].student.completed_topics;\n\n    const calculateCompletedTopicStatus = function () {\n        for (let completedTopic of completedTopics) {\n            if (topic.title === completedTopic) {\n                return \"Completed!\"\n            };\n        };\n    };\n\n    const completedTopicStatus = calculateCompletedTopicStatus();\n \n    return ( \n        <div>\n            <h3>{topic.title} {completedTopicStatus}</h3>\n            <ul>\n              {words}\n            </ul>\n        </div>\n    )\n}\n\nexport default Topic;","import Topic from \"./Topic\";\n\n\nconst TopicList = ({topics, accounts}) => {\n\n    const listItems = topics.map(topic => {\n        return <Topic topic={topic} accounts={accounts} key={topic._id}/>\n    })\n\n    return (\n        <div>\n            <h2>Topic categories:</h2>\n            { accounts.length > 0 ?\n            <ul className=\"topics-list\">\n                {listItems}\n            </ul>\n            : null }\n        </div>\n    )\n}\n\nexport default TopicList;","const baseURL = 'http://localhost:5000/api/topics';\n\nconst TopicService = {\n    getTopics() {\n        return fetch(baseURL)\n        .then(res => res.json())\n    },\n\n    postTopic(topic) {\n        return fetch(baseURL, {\n            method: 'POST',\n            body: JSON.stringify(topic),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => res.json());\n    }\n}\n\nexport default TopicService;","import owlbotAuth from \"./auth\";\n\nconst baseURL = 'https://owlbot.info/api/v4/dictionary/';\n\nconst getHeaders = {\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Token ${owlbotAuth.token}`\n    }\n}\n\nconst WordService = {\n    getWordInfo(word) {\n        return fetch(baseURL + word, getHeaders)\n        .then(res => res.json());\n    }\n}\n\nexport default WordService;\n\n// curl --header \"Authorization: Token YOUR_TOKEN\" https://owlbot.info/api/v4/dictionary/owl","const owlbotAuth = {\n    token: 'a62ed48e984604001204b2af4f405a763ad97feb'\n}\nexport default owlbotAuth;","import { useState } from \"react\";\nimport TopicService from \"../../services/TopicService\";\nimport WordService from \"../../services/WordService\";\n\nconst TopicForm = ({addNewTopic}) => {\n\n    const [formData, setFormData] = useState({});\n\n\n    const onChange = (evt) => {\n        formData[evt.target.id] = evt.target.value;\n        setFormData(formData);\n    };\n\n    const handleFormSubmit = (evt) => {\n        evt.preventDefault()\n        let words = Object.values(formData);\n        words.splice(0, 1);\n        \n        let formattedData = {\n            \"title\": formData.title,\n            \"word_list\": words\n        };\n        console.log(formattedData);\n        \n        TopicService.postTopic(formattedData)\n            .then((data) => {addNewTopic(formattedData)})\n        const form = document.querySelector('#new-topic-form')\n        form.reset();\n        setFormData({});\n        \n    };\n\n    return (\n        <div>\n            <h2>Topic form</h2>\n            <form onSubmit={handleFormSubmit} id=\"new-topic-form\">\n                <label htmlFor=\"title\">Topic title</label>\n                <input onChange={onChange} type=\"text\" id=\"title\" required></input>\n                <h3>Word list</h3>\n                <label htmlFor=\"word1\">1.</label>\n                <input onChange={onChange} type=\"text\" id=\"word1\"></input>\n                <label htmlFor=\"word2\">2.</label>\n                <input onChange={onChange} type=\"text\" id=\"word2\"></input>\n                <label htmlFor=\"word3\">3.</label>\n                <input onChange={onChange} type=\"text\" id=\"word3\"></input>\n                <label htmlFor=\"word4\">4.</label>\n                <input onChange={onChange} type=\"text\" id=\"word4\"></input>\n                <label htmlFor=\"word5\">5.</label>\n                <input onChange={onChange} type=\"text\" id=\"word5\"></input>\n                <label htmlFor=\"word6\">6.</label>\n                <input onChange={onChange} type=\"text\" id=\"word6\"></input>\n                <label htmlFor=\"word7\">7.</label>\n                <input onChange={onChange} type=\"text\" id=\"word7\"></input>\n                <label htmlFor=\"word8\">8.</label>\n                <input onChange={onChange} type=\"text\" id=\"word8\"></input>\n                <label htmlFor=\"word9\">9.</label>\n                <input onChange={onChange} type=\"text\" id=\"word9\"></input>\n                <label htmlFor=\"word10\">10.</label>\n                <input onChange={onChange} type=\"text\" id=\"word10\"></input>\n\n                <button className=\"standard-button\" type=\"submit\">Save topic</button>\n            </form>\n        </div>\n    );\n\n};\n\nexport default TopicForm;","import { useState, useEffect } from \"react\";\nimport TopicList from \"../../components/parent/TopicList\";\nimport TopicService from \"../../services/TopicService\";\nimport AccountsService from \"../../services/AccountsService\";\nimport TopicForm from \"../../components/parent/TopicForm\";\n\nconst ParentDashboard = () => {\n    \n    const [topics, setTopics] = useState([])\n    const [accounts, setAccounts] = useState([]);\n\n    \n    useEffect(() => {\n        TopicService.getTopics()\n            .then(result => setTopics(result))\n        AccountsService.getAccounts()\n            .then(result => setAccounts(result))\n    }, [])\n\n    const addNewTopic = (newTopic) => {\n        const temp = topics.map(topics => topics);\n        temp.push(newTopic);\n        setTopics(temp);\n    };\n\n\n    return (\n        <section className=\"dashboard\">\n            <h2>Parent Dashboard</h2>\n            { accounts.length > 0 ?\n            <section id=\"account-details\">\n                <h3>Account details</h3>\n                <p>Parent: {accounts[0].parent.name}</p>\n                <p>email: {accounts[0].parent.email}</p>\n                <p>Student: {accounts[0].student.name}</p>\n\n                <p>Age: {accounts[0].student.age}</p>\n            </section> : null}\n\n            <TopicForm addNewTopic={addNewTopic}></TopicForm>\n            \n            <TopicList topics={topics} accounts={accounts}></TopicList>\n        </section>\n    )\n}\n\nexport default ParentDashboard;","import {Link} from 'react-router-dom'\n\nconst Topic = ({topic, accounts}) => {\n\n    const completedTopics = accounts[0].student.completed_topics;\n\n    const calculateCompletedTopicStatus = function () {\n        for (let completedTopic of completedTopics) {\n            if (topic.title === completedTopic) {\n                return true\n            };\n        };\n    };\n\n    const completedTopicStatus = calculateCompletedTopicStatus();\n\n    return (\n        <li>\n            <Link to={{\n                    pathname: `/student/${topic.title}`,\n                    state: {topic, accounts}\n                }}><button className=\"standard-button\">{topic.title.toUpperCase()}</button>\n            </Link>\n            {completedTopicStatus ? <p className=\"completed-trophy\">&#127942;</p> : null}\n        </li>\n    )\n}\n\nexport default Topic;","import Topic from \"./Topic\";\n\n\nconst TopicList = ({topics, accounts}) => {\n\n    const listItems = topics.map(topic => {\n        return <Topic topic={topic} accounts={accounts} key={topic._id}/>\n    })\n\n    return (\n        <div>\n            <h3>Topics</h3>\n            <ul className=\"topic-buttons-container\">\n                {listItems}\n            </ul>\n        </div>\n    )\n}\n\nexport default TopicList;","import {useState, useEffect} from 'react'\nimport TopicService from \"../../services/TopicService\";\nimport TopicList from \"../../components/student/TopicList\";\nimport AccountsService from \"../../services/AccountsService\";\n\n\nconst StudentDashboard = () => {\n\n    const [topics, setTopics] = useState([])\n    const [accounts, setAccounts] = useState([])\n    \n    useEffect(() => {\n        TopicService.getTopics()\n            .then(result => setTopics(result))\n        AccountsService.getAccounts()\n            .then(result => setAccounts(result))\n    }, [])\n    return (\n        <section className=\"dashboard\">\n                <h2>Student Dashboard</h2>\n                {accounts.length > 0 && topics.length > 0 ? <TopicList topics={topics} accounts={accounts}></TopicList> \n                : null}\n        </section>\n    )\n}\n\nexport default StudentDashboard;","import { useState, useEffect } from \"react\"\nimport { useLocation, Link } from \"react-router-dom\"\nimport WordService from \"../../services/WordService\"\nimport AccountService from '../../services/AccountsService'\n\nconst QuizPage = () => {\n\n    const data = useLocation()\n    const topic = data.state.topic\n    const accounts = data.state.accounts\n\n    const [questionNumber, setQuestionNumber] = useState(0);\n    const [answer, setAnswer] = useState('');\n    const [wordInfo, setWordInfo] = useState({});\n    const [showHint, setShowHint]= useState(false);\n    const [showAnswer, setShowAnswer]= useState(false);\n    const [answerCorrect, setAnswerCorrect] = useState(false);\n    const [randomWord, setRandomWord] = useState('')\n    const [answerIncorrect, setAnswerIncorrect] = useState(false);\n\n    const [counter, setCounter] = useState(1)\n\n    useEffect(() => {\n        WordService.getWordInfo(topic.word_list[questionNumber])\n            .then(res => setWordInfo(res))\n    }, [questionNumber]);\n\n    useEffect(() => {\n        if (answer === quizWord) {\n            setAnswerCorrect(true)\n            setAnswerIncorrect(false)\n            setAnswer('')\n            setCounter(0)\n            document.getElementById(\"answer-input\").reset()\n        } else if (answer.length === quizWord.length) {\n            document.getElementById(\"answer-input\").reset()\n            setAnswerIncorrect(true)\n            setCounter(0)\n            setAnswer('')\n        }\n    }, [answer])\n    \n    const handleNextClick = () => {\n        document.getElementById(\"answer-input\").reset()\n        setQuestionNumber(questionNumber + 1)\n        setShowHint(false)\n        setShowAnswer(false);\n        setAnswerCorrect(false);\n        setAnswerIncorrect(false);\n        setCounter(1);\n        setAnswer('')\n    }\n\n    const quizWord = topic.word_list[questionNumber]\n\n    const handleHintClick = () => {\n        letterRandomise(quizWord)\n        setShowHint(true);\n    }\n\n    const handleRevealClick = () => {\n        setShowAnswer(true);\n    }\n\n    const letterRandomise = (quizWord) => {\n        let word = quizWord;\n        let shuffleWord = '';\n        quizWord = quizWord.split('');\n        while (quizWord.length > 0) {\n            shuffleWord += quizWord.splice(quizWord.length * Math.random() << 0,1);\n        }\n        if (word === shuffleWord) {\n            letterRandomise(quizWord)\n        }\n        setRandomWord(shuffleWord);\n    }\n\n    const checkAnswer = (event) => {\n        setAnswer(answer.concat(event.target.value.toLowerCase()))\n        // .then(handleKeyUp())\n        // setAnswer(event.target.value.toLowerCase())\n    }\n\n\n    const updateAccount = () => {\n        const temp = {...accounts[0]}\n        temp.student.completed_topics.push(topic.title)\n        delete temp._id\n        AccountService.updateAccounts(accounts[0]._id, temp)\n    }\n\n    const handleKeyUp = (event) => {\n        if (counter >= quizWord.length) {\n            setCounter(0)\n        } else if (event.target.value.length == 1) {\n            setCounter(counter +1)\n            document.querySelector(`#answer-box-${counter}`).focus()\n        } else{\n            console.log(\"oops\")\n        }\n        // console.log(\"Keys Up!\");\n        // console.log(counter)\n    }\n        \n\n    return(\n        <section id=\"quiz-body\">\n            <h2>{topic.title} quiz</h2>\n            \n            {Object.keys(wordInfo).length > 0 ? <img src={wordInfo.definitions[0].image_url } alt={wordInfo.word}></img> : null}\n            \n            <button className=\"standard-button\" onClick={handleHintClick}>Show Hint</button>\n            {showHint ? <p>{randomWord}</p> : null}\n\n            <button className=\"standard-button\" onClick={handleRevealClick}>Reveal answer</button>\n            {showAnswer ? <p>The answer is {wordInfo.word}</p> : null}\n\n            \n\n            <form id=\"answer-input\">\n                <label htmlFor=\"answer-box\">Enter your answer here:</label>\n                {quizWord.split('').map((letter, index) => {\n                    return <input maxLength='1' className=\"letter-input\" id={`answer-box-${index}`} type=\"text\" onKeyUp={e => {checkAnswer(e); handleKeyUp(e)}} ></input>\n                })}\n                {/* <input id=\"answer-box\" type=\"text\" onChange={checkAnswer}></input> */}\n            </form>\n\n            {answerCorrect ? \n                <div>\n                    <h2>CORRECT!</h2>\n                    <p>{wordInfo.definitions[0].definition}</p>\n                </div> : null}\n\n            {answerIncorrect ?\n                <div>\n                    <h2>TRY AGAIN!</h2>\n                </div> : null}\n\n            {wordInfo.word !== topic.word_list[topic.word_list.length - 1] ? \n                <button className=\"standard-button\" onClick={handleNextClick}>Next</button> : \n                <Link to={`/student/${topic.title}/completed`}><button onClick={updateAccount}>Complete Topic!</button></Link>}\n            <Link to=\"/student\"><button className=\"standard-button\">Back To Dashboard</button> </Link>\n\n        </section>\n\n\n    )\n}\n\nexport default QuizPage","export default __webpack_public_path__ + \"static/media/trophy.7be342d3.png\";","import '../../CompletionPage.css'\nimport trophy from \"../../images/trophy.png\"\nimport { useParams, Link } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\n\nimport ConfettiExplosion from '@reonomy/react-confetti-explosion';\n\nconst CompletionPage = () => {\n\nconst [isExploding, setIsExploding] = useState(false);   \n\nuseEffect(() => {\n    setIsExploding(true)\n}, []) \n\nlet {topic} = useParams()\n\n    return(\n        <div id='completion-page-wrapper'>\n            {isExploding && <ConfettiExplosion />}\n            <p>You have completed the {topic} quiz!</p>\n            <img id='trophy-img' src={trophy} alt=\"gold completion trophy\" />\n            <Link to=\"/student\"><button className=\"standard-button\">Back To Dashboard</button> </Link>\n        </div>\n    )\n}\n\nexport default CompletionPage\n","import './App.css';\nimport { BrowserRouter as Router, Route, Switch, useParams } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport LandingPage from './components/LandingPage';\nimport ParentDashboard from './containers/parent/ParentDashboard';\nimport StudentDashboard from './containers/student/StudentDashboard';\nimport QuizPage from './components/student/QuizPage';\nimport CompletionPage from './components/student/CompletionPage';\n\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar></Navbar>\n      <main>\n        <Switch>\n        <Route path='/' component={LandingPage} exact />\n        <Route path='/parent' component={ParentDashboard} />\n        <Route path='/student' exact component={StudentDashboard} />\n        <Route path='/student/:topic' exact component={QuizPage}/>\n        <Route path='/student/:topic/completed' component={CompletionPage}/>\n        </Switch>\n      </main>   \n    </Router> \n    );\n    \n      \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}